const { confirmPayment } = useStripe();
  const [cardDetails, setCardDetails] = useState<any>(null);
  const route = useRoute<PaymentScreenRouteProp>();
  const { total } = route.params; // Total in Naira

  const fetchPaymentIntentClientSecret = async () => {
    try {
      const response = await fetch(
        "http://localhost:5000/create-payment-intent",
        {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ amount: total * 100 }), // Convert Naira to Kobo
        }
      );

      const data = await response.json();

      if (!data.clientSecret) {
        throw new Error("No clientSecret returned from server.");
      }

      return data.clientSecret;
    } catch (err: any) {
      Alert.alert("Error", "Failed to create payment intent.");
      console.error("PaymentIntent Error:", err);
      return null;
    }
  };

  const handlePayPress = async () => {
    const clientSecret = await fetchPaymentIntentClientSecret();
    if (!clientSecret) return;

    const { paymentIntent, error } = await confirmPayment(clientSecret, {
      paymentMethodType: "Card",
      paymentMethodData: {
        billingDetails: {
          name: "Test User", // You can collect this from user input if needed
        },
      },
    });

    if (error) {
      Alert.alert("Payment failed", error.message);
    } else if (paymentIntent) {
      Alert.alert("Payment successful", `Status: ${paymentIntent.status}`);
    }
  };

  return (
    <View style={{ padding: 20 }}>
      <CardField
        postalCodeEnabled={true}
        placeholders={{ number: "4242 4242 4242 4242" }}
        onCardChange={(cardDetails) => setCardDetails(cardDetails)}
        style={{ height: 50, marginVertical: 30 }}
      />
      <Button
        title={`Pay â‚¦${total.toLocaleString()}`}
        onPress={handlePayPress}
      />
    </View>
  );
};

